package weblab;

import java.io.*;
import java.util.*;

class Solution {

  // Implement the solve method to return the answer to the problem posed by the inputstream.
  public static String run(InputStream in) {
    return new Solution().solve(in);
  }

  public String solve(InputStream in) {
    Scanner sc = new Scanner(in);
    int n = sc.nextInt();
    int m = sc.nextInt();
    int b = sc.nextInt();
    int s = 0;
    Edge[] edges = new Edge[m];
    Edge[] tree = new Edge[n - 1];
    for (int i = 0; i < m; i++) edges[i] = new Edge(sc.nextInt(), sc.nextInt(), sc.nextInt());
    Arrays.sort(edges, Comparator.comparingInt(e -> e.l));
    UnionFind uf = new UnionFind(n);
    for (Edge e : edges) {
      if (uf.join(e.x, e.y))
        tree[s++] = e;
      if (s == n - 1)
        break;
    }
    long sum = 0;
    long amount = 0;
    for (Edge edge : tree) {
      sum += edge.l;
      if (sum <= b)
        amount++;
    }
    return sum + " " + amount;
  }

  class UnionFind {

    private int[] parent;

    private int[] rank;

    public UnionFind(int n) {
      parent = new int[n];
      rank = new int[n];
      for (int i = 0; i < n; i++) parent[i] = i;
    }

    // returns false if x and y are in same set
    private boolean join(int x, int y) {
      int xrt = find(x);
      int yrt = find(y);
      if (rank[xrt] > rank[yrt])
        parent[yrt] = xrt;
      else if (rank[xrt] < rank[yrt])
        parent[xrt] = yrt;
      else if (xrt != yrt)
        rank[parent[yrt] = xrt]++;
      return xrt != yrt;
    }

    private int find(int x) {
      return parent[x] == x ? x : (parent[x] = find(parent[x]));
    }
  }

  private class Edge {

    // from, to and length
    int x, y, l;

    public Edge(int from, int to, int length) {
      x = from;
      y = to;
      l = length;
    }
  }
}
