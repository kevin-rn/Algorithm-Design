package weblab;

class Solution {

  /*
	 * Note that entry node[0] should be avoided, as nodes are labelled node[1] through node[n].
	 */
  public static int weight(int n, int[] nodes) {
    int[] mem = new int[n + 1];
    mem[0] = 0;
    mem[1] = nodes[1];
    for (int i = 2; i <= n; i++) {
      {
        // Find which node would get you a higher total weight for the current node.
        int result = Integer.max(mem[i - 1], mem[i - 2] + nodes[i]);
        mem[i] = result;
      }
    }
    return mem[n];
  }
}

//_____________________________________________________________________________________________________________________

package weblab;

import static org.junit.Assert.*;
import java.util.Scanner;
import org.junit.*;
import org.junit.rules.*;

public class UTest {

  private long time = 0;

  @Rule
  public TestName name = new TestName();

  @Before
  public void setUp() {
    time = System.currentTimeMillis();
  }

  @After
  public void tearDown() {
    System.out.println("Test '" + name.getMethodName() + "' took " + (System.currentTimeMillis() - time) + "ms");
  }

  private static void runTestWithFile(String fileName) {
    ProblemInstance x = parseInput(WebLab.getData(fileName + ".in"));
    int expected = Integer.parseInt(WebLab.getData(fileName + ".out").trim());
    assertEquals(expected, Solution.weight(x.graph.length - 1, x.graph));
  }

  private static ProblemInstance parseInput(String in) {
    // Reading the input through the use of a Scanner.
    Scanner sc = new Scanner(in);
    // Read the amount of nodes.
    int n = sc.nextInt();
    int[] graph = new int[n + 1];
    // Read the weight of every node.
    for (int i = 1; i <= n; i++) {
      graph[i] = sc.nextInt();
    }
    // Close the scanner.
    sc.close();
    return new ProblemInstance(graph);
  }

  private static class ProblemInstance {

    int[] graph;

    public ProblemInstance(int[] graph) {
      this.graph = graph;
    }
  }

  @Test(timeout = 100)
  public void example() {
    int n = 5;
    int[] nodes = { 0, 2, 1, 6, 8, 9 };
    assertEquals(17, Solution.weight(n, nodes));
  }

  @Test(timeout = 100)
  public void singleInput() {
    runTestWithFile("test1");
  }

  @Test(timeout = 100)
  public void doubleInput1() {
    runTestWithFile("test2");
  }

  @Test(timeout = 100)
  public void doubleInput2() {
    runTestWithFile("test3");
  }

  @Test(timeout = 100)
  public void tripleInput1() {
    runTestWithFile("test4");
  }

  @Test(timeout = 100)
  public void tripleInput2() {
    runTestWithFile("test5");
  }

  @Test(timeout = 800)
  public void twoThousandNodes() {
    runTestWithFile("test6");
  }

  @Test(timeout = 800)
  public void fiveThousandNodes() {
    runTestWithFile("test7");
  }
}
